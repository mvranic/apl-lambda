 processEvents handler;context;errval;event;next;result;err;descrition;en;stack;sink;errns;count;errorvar;errorstmt;si;lc;execnsname;currns
 count←0
 errorvar←'#.LAMBDAERRORVEC',∊⍕¨⎕TS
  errorstmt←'sink←{en←⎕DMX.EN ⋄ descrition←2↓⊃,/(⊂''\n ''),¨(⎕DMX.DM),(⊂⎕DMX.Message) ⋄ si←⎕XSI ⋄ lc←⎕LC ⋄ ',errorvar,'←en descrition si lc ⋄ ⎕SIGNAL 501 ⋄ 0} 0' 
   logInfo 'errorstmt:' errorstmt
 :While 1
     count+←1
     logInfo'processEvents'count
⎕SHADOW '⎕TRAP'
     ⎕TRAP←(1001 'N')((501 1000)'C' '→ErrorNext')(0 'E'errorstmt)
    logInfo 1
     :If APLASYNC
         event context←awaitTask asyncTask'nextInvocation'⍬
     :Else
         event context←nextInvocation ⍬
     :EndIf
    logInfo 2
     :GoTo Invoke

ErrorNext:
 ⎕TRAP←0⍴⎕TRAP
   logInfo 3
 
     :Trap 0
        logInfo 4
 
             en descrition si lc←getError
             stack←si,¨'[',¨(⍕¨lc),¨']'
         err←toLambdaErr en descrition stack
         sink←initError err
            logInfo 5
 
     :Else
         logError'Unhandled next invocation error.'
     :EndTrap
        logInfo 6
     ⎕OFF 1

Invoke:
   logInfo 7
 
⎕SHADOW '⎕TRAP'
     ⎕TRAP←(1001 'N')((501 1000)'C' '→ErrorInvoke')(0 'E'errorstmt)
   logInfo 8
  currns←''⎕NS''
     :Repeat
         execnsname←currns,'.lambdaexec',⊃,/⍕¨⎕TS,(?999)
         logInfo'execnsname:'execnsname
     :Until 0≠⎕NC'execnsname'

logInfo 8.1
 
     logInfo'Handler is going to be executed:'handler
     :If APLASYNC
         result←awaitTask asyncTask'callHandler'(execnsname handler(event context))
     :Else
         result←callHandler execnsname handler(event context)
     :EndIf
logInfo 8.2
     errns←result.Err
     :If 9≠⎕NC'result.Err'
         logInfo'Invoking Response request for ',handler,' ...'
         :If APLASYNC
             sink←awaitTask asyncTask'invokeResponse'(result.Result context)
         :Else
             sink←invokeResponse(result.Result context)
         :EndIf
     :Else
         logInfo'Invoking Error request for ',handler,' ...'
         errns.InvocationErr←'Execution'
         :If APLASYNC
             sink←awaitTask asyncTask'invokeError'(errns context)
         :Else
             sink←invokeError(errns context)
         :EndIf
     :EndIf
     :Continue

ErrorInvoke:
 ⎕TRAP←0⍴⎕TRAP
   :Trap 0
   logInfo 9

   logInfo 9.1 (⎕NC 'getError')
   logInfo 9.2 (getError)
         
     en descrition si lc←getError
   logInfo 'processEvents en descrition si lc' (en descrition si lc)
   logInfo 'processEvents ⍴si' (⍴si)
   logInfo 'processEvents ⍴lc' (⍴lc)
     stack←si,¨'[',¨(⍕¨lc),¨']'
   logInfo 'processEvents stack' stack
     errns←toLambdaErr en descrition stack
     errns.InvocationErr←'Invocation'
   logInfo 10
         :If APLASYNC
             sink←awaitTask asyncTask'invokeError'(errns context)
         :Else
             sink←invokeError(errns context)
         :EndIf
     :Else
         logError'Unhandled invocation error'
     :EndTrap
     :Continue
 :EndWhile
